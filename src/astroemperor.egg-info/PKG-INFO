Metadata-Version: 2.2
Name: astroemperor
Version: 0.9.5
Summary: Flexible python exoplanet fitter
Author-email: ReddTea <redd@tea.com>
License: MIT License
        
        Copyright (c) [year] [fullname]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://astroemperor.readthedocs.io/
Project-URL: Documentation, https://astroemperor.readthedocs.io/
Project-URL: Repository, https://github.com/ReddTea/astroemperor/
Project-URL: Issues, https://github.com/ReddTea/astroemperor/issues
Keywords: python,MCMC,sampler,adaptive,parallel tempering
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib>=3.5.1
Requires-Dist: kepler.py
Requires-Dist: reddemcee
Requires-Dist: reddcolors
Requires-Dist: tabulate
Requires-Dist: termcolor
Requires-Dist: tqdm
Requires-Dist: corner
Requires-Dist: fast_kepler

# EMPEROR
Exoplanet Mcmc Parallel tEmpering for Rv Orbit Retrieval

# Overview
`EMPEROR` (Exoplanet Mcmc Parallel tEmpering for Rv Orbit Retrieval), is a Python-based algorithm that automatically searches for signals in Radial Velocity timeseries, employing Markov chains and parallel tempering methods, convergence tests and Bayesian statistics, along with various noise models. A number of posterior sampling routines are available, focused on efficiently searching for signals in highly multi-modal posteriors. The code allows the analysis of multi-instrument and multi-planet data sets and performs model comparisons automatically to return the optimum model that best describes the data.

## Why `EMPEROR`?

  - It's really simple to use
  - It has a series of configuration commands that will amaze you
  - Advanced Noise Model
  - Quite Flexible!


# Dependencies
This code makes use of:

  - [Numpy](https://numpy.org)
  - [Scipy](https://scipy.org)
  - [pandas](https://pandas.pydata.org)
  - [matplotlib>=3.5.1](https://matplotlib.org)

  - [kepler](https://github.com/dfm/kepler.py)
  - [reddemcee](https://github.com/ReddTea/reddemcee/)
  - [reddcolors](https://github.com/ReddTea/reddcolors/)
  - [tabulate](https://pypi.org/project/tabulate/)
  - [termcolor](https://pypi.python.org/pypi/termcolor)
  - [tqdm](https://pypi.python.org/pypi/tqdm)

All of them can be easily installed with pip.

For additional capabilities, you can install:

  - [arviz](https://arviz-devs.github.io/arviz/)
  - [celerite2](https://celerite2.readthedocs.io/en/latest/)
  - [corner](https://pypi.python.org/pypi/corner)
  - [dynesty](https://dynesty.readthedocs.io/en/stable/)
  - [emcee](http://dan.iel.fm/emcee/current/)
  - [scikit-learn](https://scikit-learn.org/stable/)



# Installation

## Pip
In the console type
```sh
pip3 install astroEMPEROR
```

## From Source
In the console type
```sh
git clone https://github.com/ReddTea/astroEMPEROR.git
```


## Installation Verification
Download the [tests folder](https://github.com/ReddTea/astroemperor/tree/main/tests) and run `test_basic.py` to make sure everything works!

In terminal:

```sh
python test_basic.py
```


# Quick Usage
We need to set up our working directory with two subfolders, `datafiles` and `datalogs`, the former for data input, the later for output.

```
ðŸ“‚working_directory
 â”£ ðŸ“œmini_test.py
 â”£ ðŸ“‚datafiles
 â”ƒ â”£ ðŸ“‚51Peg
 â”ƒ â”ƒ â”— ðŸ“‚RV
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œ51peg.vels
 â”£ ðŸ“‚datalogs
 â”ƒ â”£ ðŸ“‚51Peg
 â”ƒ â”ƒ â”— ðŸ“‚run_1
```

Running the code is as simple as:

```python
import astroemperor

sim = astroemperor.Simulation()

sim.set_engine('reddemcee')
sim.engine_config['setup'] = [2, 100, 500, 1]
sim.load_data('51Peg')  # read from ./datafiles/

sim.plot_trace['plot'] = False  # deactivate arviz plots
sim.autorun(1, 1)  # (from=1, to=1): just 1 keplerian

```

# Outputs
All results can be found in the `datalogs` folder. You will see chain plots, posterior plots, histograms, phasefolded curves, the chain sample and more!
